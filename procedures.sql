
CREATE OR REPLACE PROCEDURE RECHARGE_ACCOUNT(IN MOB_NUMBER NUMERIC, IN AMOUNT NUMERIC) AS $$
  DECLARE
  OLD_AMOUNT NUMERIC;
  CUR_TIMESTAMP TIMESTAMPTZ;
  VALIDITY NUMERIC;
  END_DATE varchar(100);
  BEGIN
    SELECT BALANCE INTO OLD_AMOUNT FROM USERS WHERE MOBILE_NUMBER = MOB_NUMBER;
    CUR_TIMESTAMP := NOW();
    VALIDITY := FIND_RECHARGE_LAST_DATE(AMOUNT);
    END_DATE := TO_CHAR(CUR_TIMESTAMP + interval '1 DAY' * VALIDITY:: DATE, 'YYYY-MM-DD HH12:MI:SS AM');
    INSERT INTO RECHARGE_HISTORY VALUES (CUR_TIMESTAMP, MOB_NUMBER, AMOUNT, VALIDITY);
    UPDATE USERS SET  BALANCE = OLD_AMOUNT + AMOUNT WHERE MOBILE_NUMBER = MOB_NUMBER;
    INSERT INTO NOTIFICATIONS
    VALUES (MOB_NUMBER, 'YOU HAVE SUCCESSFULLY RECHARGED ' ||
    AMOUNT || ' TAKA IN YOUR ACCOUNT BALANCE. YOUR CURRENT ACCOUNT BALANCE IS '
    || OLD_AMOUNT+ AMOUNT || ' TAKA. YOUR BALANCE WILL BE EXPIRED ON '|| END_DATE);
    RAISE NOTICE 'SUCCESSFULLY RECHARGED % TAKA IN THE ACCOUNT', AMOUNT;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT INSERT THE UPDATED INFO INTO THE RECHARGE_HISTORY OR USERS OR NOTIFICATIONS :(';
  END;
  $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION FIND_RECHARGE_LAST_DATE(IN AMOUNT NUMERIC) RETURNS NUMERIC AS $$
  DECLARE
  VALID_DAYS NUMERIC;
    BEGIN
    IF(AMOUNT < 50) THEN
      VALID_DAYS := 30;
    ELSE VALID_DAYS := 60;
    end if;
    RETURN VALID_DAYS;
  end;
  $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE PROCEDURE PURCHASE_SMS_OFFER(IN OFFER_NO NUMERIC, IN USER_NO NUMERIC) AS $$
  DECLARE
    PURCHASED_TIMESTAMP TIMESTAMPTZ;
    COST NUMERIC;
    END_DATE varchar(100);
    VALID NUMERIC;
    REWARD_POINT NUMERIC;
    SMS_TOTAL NUMERIC;
    OLD_REWARD_POINT NUMERIC;
    OLD_ACCOUNT_BALANCE NUMERIC;
    OLD_SMS NUMERIC;
  BEGIN
    PURCHASED_TIMESTAMP := NOW();
    SELECT PRICE, VALIDITY, REWARD_POINTS, SMS_AMOUNT  FROM SMS_OFFER WHERE  OFFER_ID = OFFER_NO
    INTO COST, VALID, REWARD_POINT, SMS_TOTAL;
    SELECT TOTAL_REWARD_POINT, BALANCE, TOTAL_OFFER_SMS FROM USERS WHERE MOBILE_NUMBER = USER_NO
    INTO OLD_REWARD_POINT, OLD_ACCOUNT_BALANCE, OLD_SMS;
    IF OLD_ACCOUNT_BALANCE >= COST THEN
      END_DATE := TO_CHAR(PURCHASED_TIMESTAMP + interval '1 DAY' * VALID, 'YYYY-MM-DD HH12:MI:SS AM');
      INSERT INTO PURCHASE_OFFER VALUES (USER_NO, OFFER_NO,PURCHASED_TIMESTAMP);
      INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED '
      ||SMS_TOTAL || '. '||COST || ' TAKA HAS BEEN DEDUCTED FROM YOUR ACCOUNT BALANCE.'
      ||' THE SMS BUNDLE WILL EXPIRE ON '|| END_DATE);
      UPDATE USERS SET(TOTAL_REWARD_POINT, TOTAL_OFFER_SMS, BALANCE) =
      (OLD_REWARD_POINT+REWARD_POINT, OLD_SMS + SMS_TOTAL, OLD_ACCOUNT_BALANCE-COST)
      WHERE MOBILE_NUMBER = USER_NO;
      RAISE NOTICE 'SUCCESSFULLY PURCHASED A SMS OFFER : %',OFFER_NO;
    ELSE
    RAISE NOTICE 'HAVE NOT SUFFICIENT BALANCE';
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT PURCHASE THE SMS OFFER %', OFFER_NO;
  end;
  $$ LANGUAGE PLPGSQL;


CREATE OR REPLACE PROCEDURE PURCHASE_TALK_TIME_OFFER(IN OFFER_NO NUMERIC, IN USER_NO NUMERIC) AS $$
  DECLARE
    PURCHASED_TIMESTAMP TIMESTAMPTZ;
    COST NUMERIC;
    END_DATE varchar(100);
    VALID NUMERIC;
    REWARD_POINT NUMERIC;
    TALK_TIME_TOTAL NUMERIC;
    OLD_REWARD_POINT NUMERIC;
    OLD_ACCOUNT_BALANCE NUMERIC;
    OLD_TALK_TIME NUMERIC;
  BEGIN
    PURCHASED_TIMESTAMP := NOW();
    SELECT PRICE, VALIDITY, REWARD_POINTS, TALK_TIME  FROM TALK_TIME_OFFER WHERE  OFFER_ID = OFFER_NO
    INTO COST, VALID, REWARD_POINT, TALK_TIME_TOTAL;
    SELECT TOTAL_REWARD_POINT, BALANCE, TOTAL_TALK_TIME FROM USERS WHERE MOBILE_NUMBER = USER_NO
    INTO OLD_REWARD_POINT, OLD_ACCOUNT_BALANCE, OLD_TALK_TIME;
    IF OLD_ACCOUNT_BALANCE >= COST THEN
      END_DATE := TO_CHAR(PURCHASED_TIMESTAMP + interval '1 DAY' * VALID, 'YYYY-MM-DD HH12:MI:SS AM');
      INSERT INTO PURCHASE_OFFER VALUES (USER_NO, OFFER_NO,PURCHASED_TIMESTAMP);
      INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED '
      ||TALK_TIME_TOTAL || ' MINUTES. '||COST || ' TAKA HAS BEEN DEDUCTED FROM YOUR ACCOUNT BALANCE.'
      ||' THE TALK TIME BUNDLE WILL EXPIRE ON '|| END_DATE);
      UPDATE USERS SET (TOTAL_REWARD_POINT, TOTAL_TALK_TIME, BALANCE) =
      (OLD_REWARD_POINT+REWARD_POINT, OLD_TALK_TIME + TALK_TIME_TOTAL, OLD_ACCOUNT_BALANCE-COST)
      WHERE MOBILE_NUMBER = USER_NO;
      RAISE NOTICE 'SUCCESSFULLY PURCHASED A TALK TIME OFFER : %',OFFER_NO;
    ELSE
    RAISE NOTICE 'HAVE NOT SUFFICIENT BALANCE';
    END IF;

    EXCEPTION  WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT PURCHASE THE TALK TIME OFFER %', OFFER_NO;
  end;
  $$ LANGUAGE PLPGSQL;


CREATE OR REPLACE PROCEDURE PURCHASE_GENERAL_OFFER
  (IN USER_NO NUMERIC, IN MIN NUMERIC, IN DATA NUMERIC, IN SMS NUMERIC, IN VALID NUMERIC)
AS $$
  DECLARE
    PURCHASED_TIMESTAMP TIMESTAMPTZ;
    COST NUMERIC;
    END_DATE varchar(100);
    OLD_ACCOUNT_BALANCE NUMERIC;
    OLD_TALK_TIME NUMERIC;
    OLD_DATA NUMERIC;
    OLD_SMS NUMERIC;
    OFFER_NO NUMERIC;
  BEGIN
    PURCHASED_TIMESTAMP := NOW();
    SELECT BALANCE, TOTAL_TALK_TIME, TOTAL_MB, TOTAL_OFFER_SMS FROM USERS INTO
    OLD_ACCOUNT_BALANCE, OLD_TALK_TIME, OLD_DATA, OLD_SMS;
    COST := COUNT_GENERAL_OFFER_PRICE(SMS, DATA, MIN);

    IF OLD_ACCOUNT_BALANCE >= COST THEN
      END_DATE := TO_CHAR(PURCHASED_TIMESTAMP + INTERVAL '1 DAY' * VALID, 'YYYY-MM-DD HH12:MI:SS AM');
      OFFER_NO = NEXTVAL(pg_get_serial_sequence('GENERAL_OFFER', 'CUSTOM_ID'));
      INSERT INTO GENERAL_OFFER(offer_id, PRICE, VALIDITY, REWARD_POINTS, MUNITE, MB_AMOUNT, SMS_AMOUNT)
      VALUES (OFFER_NO, COST,VALID, 0, MIN, DATA, SMS);
      INSERT INTO PURCHASE_OFFER VALUES(USER_NO, OFFER_NO, PURCHASED_TIMESTAMP);
      INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED '
      ||MIN || ' MINUTES. ' || DATA || ' MB. ' || SMS || ' SMS. ' ||COST || ' TAKA HAS BEEN DEDUCTED FROM YOUR ACCOUNT BALANCE.'
      ||' THE OFFER WILL EXPIRE ON '|| END_DATE);
      UPDATE USERS SET (TOTAL_MB, TOTAL_TALK_TIME, TOTAL_OFFER_SMS, BALANCE) =
      (OLD_DATA+DATA, OLD_TALK_TIME + MIN,OLD_SMS+SMS,  OLD_ACCOUNT_BALANCE-COST)
      WHERE MOBILE_NUMBER = USER_NO;
      RAISE NOTICE 'SUCCESSFULLY PURCHASED A GENERAL OFFER : %',OFFER_NO;
    ELSE
    RAISE NOTICE 'HAVE NOT SUFFICIENT BALANCE';
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT PURCHASE THE GENERAL OFFER %', OFFER_NO;
  end;
  $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION COUNT_GENERAL_OFFER_PRICE(IN SMS numeric, IN DATA numeric, IN TALK numeric)
 RETURNS NUMERIC AS $$
DECLARE
  PRICE NUMERIC;
  SMS_COST NUMERIC;
  DATA_COST NUMERIC;
  TALK_TIME_COST NUMERIC;
BEGIN
  SELECT CALL_RATE, SMS_RATE, DATA_RATE FROM PACKAGE INTO TALK_TIME_COST, SMS_COST, DATA_COST;
  PRICE := SMS_COST*4/5 * SMS + TALK_TIME_COST*4/5 * TALK + DATA_COST * 4/5 * DATA;
  RETURN PRICE;
end;

$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE PROCEDURE PURCHASE_INTERNET_OFFER(IN OFFER_NO NUMERIC, IN USER_NO NUMERIC) AS $$
  DECLARE
    PURCHASED_TIMESTAMP TIMESTAMPTZ;
    COST NUMERIC;
    END_DATE varchar(100);
    VALID NUMERIC;
    REWARD_POINT NUMERIC;
    DATA_TOTAL NUMERIC;
    OLD_REWARD_POINT NUMERIC;
    OLD_ACCOUNT_BALANCE NUMERIC;
    OLD_DATA NUMERIC;
  BEGIN
    PURCHASED_TIMESTAMP := NOW();
    SELECT PRICE, VALIDITY, REWARD_POINTS, DATA_AMOUNT  FROM INTERNET_OFFER WHERE  OFFER_ID = OFFER_NO
    INTO COST, VALID, REWARD_POINT, DATA_TOTAL;
    SELECT TOTAL_REWARD_POINT, BALANCE, TOTAL_MB FROM USERS WHERE MOBILE_NUMBER = USER_NO
    INTO  OLD_REWARD_POINT, OLD_ACCOUNT_BALANCE, OLD_DATA;

    IF OLD_ACCOUNT_BALANCE >= COST THEN
      END_DATE := TO_CHAR(PURCHASED_TIMESTAMP + interval '1 DAY' * VALID, 'YYYY-MM-DD HH12:MI:SS AM');
      if ((select count(*) from offers where offer_id = OFFER_NO) = 1) then
        raise notice 'is present in the table';
      end if;
      INSERT INTO PURCHASE_OFFER VALUES (USER_NO, OFFER_NO,PURCHASED_TIMESTAMP);
      INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED '
      ||DATA_TOTAL || ' MB. '||COST || ' TAKA HAS BEEN DEDUCTED FROM YOUR ACCOUNT BALANCE.'
      ||' THE DATA AMOUNT WILL EXPIRE ON '|| END_DATE);
      UPDATE USERS SET (TOTAL_REWARD_POINT, TOTAL_MB, BALANCE) =
      (OLD_REWARD_POINT+REWARD_POINT, OLD_DATA + DATA_TOTAL, OLD_ACCOUNT_BALANCE-COST)
      WHERE MOBILE_NUMBER = USER_NO;
      RAISE NOTICE 'SUCCESSFULLY PURCHASED A DATA OFFER : %',OFFER_NO;
    ELSE
      RAISE NOTICE 'HAVE NOT SUFFICIENT BALANCE';
    END IF;

/*  EXCEPTION
   WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT PURCHASE THE DATA OFFER %', OFFER_NO;*/
  end;
  $$ LANGUAGE PLPGSQL;

create or replace procedure purchase_reward_offer(in user_no numeric, in offer_no numeric) as $$
declare
    PURCHASED_TIMESTAMP TIMESTAMPTZ;
    END_DATE varchar(100);
    VALID NUMERIC;
    REWARD_POINT NUMERIC;
    DATA_TOTAL NUMERIC;
    OLD_REWARD_POINT NUMERIC;
    OLD_DATA NUMERIC;
 BEGIN
    PURCHASED_TIMESTAMP := NOW();
    SELECT  VALIDITY, points_need, mb_amount  FROM reward_offer WHERE  OFFER_ID = OFFER_NO
    INTO VALID, REWARD_POINT, DATA_TOTAL;
    SELECT TOTAL_REWARD_POINT, TOTAL_MB FROM USERS WHERE MOBILE_NUMBER = USER_NO
    INTO OLD_REWARD_POINT, OLD_DATA;

    IF OLD_REWARD_POINT >= REWARD_POINT THEN
      END_DATE := TO_CHAR(PURCHASED_TIMESTAMP + interval '1 DAY' * VALID, 'YYYY-MM-DD HH12:MI:SS AM');
      if ((select count(*) from offers where offer_id = OFFER_NO) = 1) then
        raise notice 'is present in the table';
      end if;
      INSERT INTO PURCHASE_OFFER VALUES (USER_NO, OFFER_NO,PURCHASED_TIMESTAMP);
      INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED '
      ||DATA_TOTAL || ' MB. '|| REWARD_POINT || ' REWARD POINTS HAVE BEEN DEDUCTED FROM YOUR TOTAL REWARD POINTS.'
      ||' THE DATA AMOUNT WILL EXPIRE ON '|| END_DATE);
      UPDATE USERS SET (TOTAL_REWARD_POINT, TOTAL_MB) =
      (OLD_REWARD_POINT-REWARD_POINT, OLD_DATA + DATA_TOTAL)
      WHERE MOBILE_NUMBER = USER_NO;
      RAISE NOTICE 'SUCCESSFULLY PURCHASED A DATA OFFER : % USING REWARD POINTS',OFFER_NO;
    ELSE
      RAISE NOTICE 'HAVE NOT SUFFICIENT REWARD POINTS';
    END IF;

  EXCEPTION
   WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT PURCHASE THE DATA OFFER % USING THE REWARD POINTS', OFFER_NO;
  end;

$$ language plpgsql;

create or replace procedure make_fnf(in number_by numeric, in number_to numeric) as $$
declare
begin
    insert into fnf values(number_by, number_to);
    raise notice 'Successfully inserted the fnf';
    exception when others then
    raise notice 'Cannot insert the fnf';
end;
$$ language plpgsql;

create or replace procedure make_link(in number_by numeric, in number_to numeric) as $$
declare
begin
  insert into link values (number_by, number_to);
  raise notice 'Successfully inserted the link';
  exception when others then
  raise notice 'Cannot insert the link';

end;
$$ language plpgsql;

create or replace procedure migrate_package(in mob_number numeric, in p_name varchar(40)) as $$
declare
  p_id numeric;
begin
  select p_id from package where package_name = p_name into p_id;
  update users set package_id = p_id where mobile_number = mob_number;
end;

$$ language plpgsql;


